[{"/Volumes/dev/brief-buster/src/index.js":"1","/Volumes/dev/brief-buster/src/App.js":"2","/Volumes/dev/brief-buster/src/reportWebVitals.js":"3","/Volumes/dev/brief-buster/src/setup.js":"4","/Volumes/dev/brief-buster/src/explode.js":"5","/Volumes/dev/brief-buster/src/nomatch.js":"6","/Volumes/dev/brief-buster/src/helpers.js":"7","/Volumes/dev/brief-buster/src/suggestions.js":"8","/Volumes/dev/brief-buster/src/widgets/interview.js":"9","/Volumes/dev/brief-buster/src/widgets/quote.js":"10","/Volumes/dev/brief-buster/src/widgets/callmom.js":"11","/Volumes/dev/brief-buster/src/widgets/statista.js":"12","/Volumes/dev/brief-buster/src/widgets/creativecases.js":"13","/Volumes/dev/brief-buster/src/widgets/thesaurus.js":"14","/Volumes/dev/brief-buster/src/widgets/cannescases.js":"15","/Volumes/dev/brief-buster/src/widgets/futureof.js":"16","/Volumes/dev/brief-buster/src/widgets/tedideas.js":"17","/Volumes/dev/brief-buster/src/widgets/academicpapers.js":"18","/Volumes/dev/brief-buster/src/widgets/warccases.js":"19","/Volumes/dev/brief-buster/src/widgets/cognitivebiases.js":"20","/Volumes/dev/brief-buster/src/widgets/twitterchatter.js":"21","/Volumes/dev/brief-buster/src/widgets/searchtrends.js":"22","/Volumes/dev/brief-buster/src/widgets/innovations.js":"23","/Volumes/dev/brief-buster/src/widgets/_linkNewWindow.js":"24"},{"size":501,"mtime":1611605804000,"results":"25","hashOfConfig":"26"},{"size":592,"mtime":1611748951000,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1611584392000,"results":"28","hashOfConfig":"26"},{"size":4194,"mtime":1611956374000,"results":"29","hashOfConfig":"26"},{"size":786,"mtime":1611956460000,"results":"30","hashOfConfig":"26"},{"size":675,"mtime":1611957807000,"results":"31","hashOfConfig":"26"},{"size":1495,"mtime":1611957643000,"results":"32","hashOfConfig":"26"},{"size":6910,"mtime":1611957352000,"results":"33","hashOfConfig":"26"},{"size":469,"mtime":1611929537000,"results":"34","hashOfConfig":"26"},{"size":360,"mtime":1611930198000,"results":"35","hashOfConfig":"26"},{"size":352,"mtime":1611930687000,"results":"36","hashOfConfig":"26"},{"size":393,"mtime":1611930842000,"results":"37","hashOfConfig":"26"},{"size":385,"mtime":1611947743000,"results":"38","hashOfConfig":"26"},{"size":415,"mtime":1611931860000,"results":"39","hashOfConfig":"26"},{"size":397,"mtime":1611947602000,"results":"40","hashOfConfig":"26"},{"size":386,"mtime":1611948728000,"results":"41","hashOfConfig":"26"},{"size":344,"mtime":1611949060000,"results":"42","hashOfConfig":"26"},{"size":398,"mtime":1611950297000,"results":"43","hashOfConfig":"26"},{"size":400,"mtime":1611949853000,"results":"44","hashOfConfig":"26"},{"size":433,"mtime":1611950871000,"results":"45","hashOfConfig":"26"},{"size":371,"mtime":1611951675000,"results":"46","hashOfConfig":"26"},{"size":557,"mtime":1611953110000,"results":"47","hashOfConfig":"26"},{"size":353,"mtime":1611957469000,"results":"48","hashOfConfig":"26"},{"size":306,"mtime":1611929440000,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"ik6lnx",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Volumes/dev/brief-buster/src/index.js",[],["102","103"],"/Volumes/dev/brief-buster/src/App.js",[],"/Volumes/dev/brief-buster/src/reportWebVitals.js",[],"/Volumes/dev/brief-buster/src/setup.js",["104","105","106","107","108"],"import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { GetBrief, constructQueryParams } from './helpers';\n\nclass Setup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.state.brief = GetBrief();\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    let field = e.target.id.split('-')[1]; //FIX this is a terrible hack\n    let val = e.target.value;\n    if(field == 'competitors' || field == 'keywords') {\n      val = e.target.value.split(', ');\n      if (val.length == 1 && val[0] == \"\") { //crutch to avoid empty blocks if input field is empty\n        val = [];\n      }\n    }\n    this.setState(state => (state.brief[field] = val, state))\n  }\n\n  constructExplodeLink() {\n    return 'explode?'+constructQueryParams(this.state.brief);\n  }\n\n  formIsValid() {\n    if (this.state.brief.brand && this.state.brief.category) {\n      return true;\n    }\n  }\n\n  renderSubmit() { //conditionally renders submit button as enabled or disabled depending on whether the form is valid\n    if (this.formIsValid()) {\n      return (\n        <Link className='button is-warning is-rounded is-large' to={this.constructExplodeLink()} >Let's do it</Link>\n      )\n    } else {\n      return (\n        <button className='button is-warning is-rounded is-large' disabled >Let's do it</button>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"columns is-centered\">\n          <div className=\"column is-half\">\n            <div className=\"container m-4 p-1\">\n              <p className=\"title has-text-centered mt-5\">\n                So you have a brief...\n              </p>\n              <p className=\"subtitle mt-1\">\n                This little tool can help you get started. Type in a few key things below and it will explode your brief into a long ToDo list that will help you start digging.\n              </p>\n              <hr />\n              <div className=\"inputFormContainer\">\n                <div className=\"field\">\n                  <label className=\"label\">What brand are you working on?</label>\n                  <div className=\"control\">\n                    <input className=\"input\" type=\"text\" id=\"input-brand\" onChange={this.handleChange} value={this.state.brief.brand} />\n                  </div>\n                  <p className=\"help\">Type the name of the company, brand or sub-brand that is at the center of your brief.</p>\n                </div>\n                <div className=\"field\">\n                  <label className=\"label\">What is the category?</label>\n                  <div className=\"control\">\n                    <input className=\"input\" type=\"text\" id=\"input-category\" onChange={this.handleChange} value={this.state.brief.category} />\n                  </div>\n                  <p className=\"help\">Type the name of a single category that this brand is competing in.</p>\n                </div>\n                <div className=\"field\">\n                  <label className=\"label\">Who are the biggest competitors?</label>\n                  <div className=\"control\">\n                    <input className=\"input\" type=\"text\" id=\"input-competitors\" onChange={this.handleChange} value={this.state.brief.competitors.join(', ')} />\n                  </div>\n                  <p className=\"help\">List as many competitors as you want. Use comma to separate.</p>\n                </div>\n                <div className=\"field\">\n                  <label className=\"label\">What are the most important words for this brand or category?</label>\n                  <div className=\"control\">\n                    <input className=\"input\" type=\"text\" id=\"input-keywords\" onChange={this.handleChange} value={this.state.brief.keywords.join(', ')} />\n                  </div>\n                  <p className=\"help\">List a few keywords that are relevant to the brand and/or the category. Use comma to separate.</p>\n                </div>\n              </div>\n              <hr />\n              <div className=\"buttons is-centered\">\n                {this.renderSubmit()}\n              </div>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n};\n\nexport default Setup;\n","/Volumes/dev/brief-buster/src/explode.js",[],"/Volumes/dev/brief-buster/src/nomatch.js",[],"/Volumes/dev/brief-buster/src/helpers.js",["109","110"],"//get the brief data from the url\nexport const GetBrief = function() {\n\n    let defaultBrief = {\n      brand: 'McDonald\\'s',\n      category: 'quick service restaurants',\n      competitors: ['Burger King', 'KFC'],\n      keywords: ['food', 'convenience', 'taste', 'value']\n    };\n\n    //get params from url query if any\n    const urlParams = new URLSearchParams(window.location.search);\n    let brief = {\n      brand : urlParams.get('brand') ? urlParams.get('brand') : '',\n      category : urlParams.get('category') ? urlParams.get('category') : '',\n      competitors : urlParams.get('competitors') ? urlParams.get('competitors').split(',') : [],\n      keywords : urlParams.get('keywords') ? urlParams.get('keywords').split(',') : []\n    }\n\n    if (brief.brand == '' && brief.category == '' && brief.competitors.length < 1 && brief.keywords.length < 1) {\n      return defaultBrief;\n    } else {\n      return  brief;\n    }\n\n}\n\n//construct QueryParams\nexport const constructQueryParams = function(obj) {\n\n  let ql = '';\n  let keys = Object.keys(obj);\n  let v;\n\n  keys.forEach((key, index) => {\n    v = obj[key];\n    if (typeof(v) == 'object') {\n      v = v.join(',');\n    }\n    if(index > 0) { ql += '&' };\n    ql += key + '=' + encodeURI(v);\n  });\n\n  return ql;\n\n}\n\n//shuffle array\nexport const shuffleArray = function (array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n","/Volumes/dev/brief-buster/src/suggestions.js",["111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127"],"/*\n * this component receives brief object as a prop and generates a number of suggestions in random order. it renders a <ol> element with all of them\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { shuffleArray, constructQueryParams } from './helpers';\n\n// import all the widgets\nimport Quote from './widgets/quote'; //quotes (google image search) about a $term\nimport Statista from './widgets/statista'; //statista info for a $brand or a $category\nimport Interview from './widgets/interview'; //reach out to $brand company's people on linkedin\nimport Callmom from './widgets/callmom'; // call your mom and ask her what she thinks about a $term\nimport Thesaurus from './widgets/thesaurus'; //check out dictionary definition for a $term, word origin and synonims\nimport CreativeCases from './widgets/creativecases'; // best creative cases for $brand from contagious\nimport CannesCases from './widgets/cannescases'; //cannes lions cases for $brand that are available on youtube\nimport FutureOf from './widgets/futureof'; //youtube search for \"the future of $term\"\nimport TedIdeas from './widgets/tedideas'; //TED search for $term\nimport WarcCases from './widgets/warccases'; //WARC search for $category\nimport AcademicPapers from './widgets/academicpapers'; //JSTOR search for a $keyword\nimport CognitiveBiases from './widgets/cognitivebiases'; //look at the list of cognitive biases from wikipedia\nimport TwitterChatter from './widgets/twitterchatter'; //see what people are saying on twitter about the $brand\nimport SearchTrends from './widgets/searchtrends'; //see how competitors are doing on search trends\nimport Innovations from './widgets/innovations'; //search SpringWise for innovations on the $topic\n\n//n-gram?\n// spotify or youtube playlist?\n// wikipedia history of terms & competitors\n// symbols and icons: thenounproject\n// check out official social channels (FB, twitter)\n// no-link tasks (e.g. think write down associations for 5 minutes)\n\nclass Suggestions extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    // create an array with all suggestionTypes for each specifying how it works\n    const suggestionTypes = [\n\n      { name: 'Quote', propKey: 'keywords', isMult: true }, //propKey - which key needs to be passed, isMult means that for each of the competitors (or keywords) a new suggestino needs to be generated\n\n      { name: 'Statista', propKey: 'competitors', isMult: true },\n\n      { name: 'Statista', propKey: 'category', isMult: false }, // this is for a separate call on category, not just competitors\n\n      { name: 'Callmom', propKey: 'brand', isMult: false },\n\n      { name: 'Thesaurus', propKey: 'keywords', isMult: true },\n\n      { name: 'CreativeCases', propKey: 'competitors', isMult: true, requiresSub: true },\n\n      { name: 'CannesCases', propKey: 'competitors', isMult: true },\n\n      { name: 'FutureOf', propKey: 'category', isMult: false },\n\n      { name: 'TedIdeas', propKey: 'keywords', isMult: true },\n\n      { name: 'AcademicPapers', propKey: 'keywords', isMult: true },\n\n      { name: 'WarcCases', propKey: 'category', isMult: false },\n\n      { name: 'CognitiveBiases', propKey: 'category', isMult: false },\n\n      { name: 'TwitterChatter', propKey: 'competitors', isMult: true },\n\n      { name: 'SearchTrends', propKey: 'competitors', isMult: false },\n\n      { name: 'Innovations', propKey: 'keywords', isMult: true },\n\n      { name: 'Interview', propKey: 'brand', isMult: false }\n\n    ];\n\n    let suggestions = [];\n\n\n    //this bit of code figures out how many actual suggestions we need, because some suggestion Types need to be done for all competitors or all keywords\n\n    suggestionTypes.forEach((st) => {\n\n      if (!st.isMult) {\n        if(this.props.brief[st.propKey]) { //check that the property exists (otherwise empty category can be passed on)\n          suggestions.push({name: st.name, propKey: st.propKey, val: this.props.brief[st.propKey]});\n        }\n      } else {\n        this.props.brief[st.propKey].forEach((p) => {\n          suggestions.push({name: st.name, propKey: st.propKey, val: p, requiresSub: st.requiresSub});\n        });\n        //special case if mult and competitors => additionally one for the brand as well\n        if(st.propKey == 'competitors') {\n          suggestions.push({name: st.name, propKey: st.propKey, val: this.props.brief.brand});\n        }\n      }\n\n    });\n\n\n    this.state.suggestions = shuffleArray(suggestions);\n\n  }\n\n  renderSug(sug) { //renders the component whose name is passed as sug\n    switch(sug.name) {\n\n      case 'Quote':\n        return (<Quote term={sug.val} />)\n        break;\n\n      case 'Statista':\n        return (<Statista term={sug.val} />)\n        break;\n\n      case 'Interview':\n        return (<Interview brand={sug.val} />)\n        break;\n\n      case 'Callmom':\n        return (<Callmom term={sug.val} />)\n        break;\n\n      case 'Thesaurus':\n        return (<Thesaurus term={sug.val} />)\n        break;\n\n      case 'CreativeCases':\n        return (<CreativeCases brand={sug.val} />)\n        break;\n\n      case 'CannesCases':\n        return (<CannesCases brand={sug.val} />)\n        break;\n\n      case 'FutureOf':\n        return (<FutureOf term={sug.val} />)\n        break;\n\n      case 'TedIdeas':\n        return (<TedIdeas term={sug.val} />)\n        break;\n\n      case 'WarcCases':\n        return (<WarcCases category={sug.val} />)\n        break;\n\n      case 'AcademicPapers':\n        return (<AcademicPapers term={sug.val} />)\n        break;\n\n      case 'CognitiveBiases':\n        return (<CognitiveBiases category={sug.val}/>)\n        break;\n\n      case 'TwitterChatter':\n        return (<TwitterChatter brand={sug.val}/>)\n        break;\n\n      case 'SearchTrends':\n        return (<SearchTrends brief={this.props.brief}/>) //we are passing the full brief here as this widget needs to be a bit smarter than the rest\n        break;\n\n      case 'Innovations':\n        return (<Innovations topic={sug.val}/>)\n        break;\n\n    }\n  }\n\n  render() {\n    return(\n      <div>\n        <p className=\"subtitle has-text-centered mt-1\">\n          Here are {this.state.suggestions.length} suggestions to get you started on your <Link to={'/?'+constructQueryParams(this.props.brief)}>{this.props.brief.brand} brief</Link>:\n        </p>\n        <hr />\n        <ol>\n          {this.state.suggestions.map(sug => (\n            <li className={'suggestion '+(sug.requiresSub ? 'sug-paywalled' : 'sug-free')} key={'key-'+Math.random()}>{this.renderSug(sug)}</li>\n          ))}\n        </ol>\n        <hr />\n        <p className=\"has-text-centered\">This is it for now. Hope it was helpful in some way. Don't see your favorite tool here? Feel free to <a href=\"mailto:george.strahov@gmail.com?subject=Add%20a%20tool%20to%20Brief%20Exploder\">send me a letter</a>. Best, +G</p>\n      </div>\n    );\n  }\n\n}\n\nexport default Suggestions;\n","/Volumes/dev/brief-buster/src/widgets/interview.js",[],"/Volumes/dev/brief-buster/src/widgets/quote.js",[],"/Volumes/dev/brief-buster/src/widgets/callmom.js",[],"/Volumes/dev/brief-buster/src/widgets/statista.js",[],"/Volumes/dev/brief-buster/src/widgets/creativecases.js",[],"/Volumes/dev/brief-buster/src/widgets/thesaurus.js",[],"/Volumes/dev/brief-buster/src/widgets/cannescases.js",[],"/Volumes/dev/brief-buster/src/widgets/futureof.js",[],"/Volumes/dev/brief-buster/src/widgets/tedideas.js",[],"/Volumes/dev/brief-buster/src/widgets/academicpapers.js",[],"/Volumes/dev/brief-buster/src/widgets/warccases.js",[],"/Volumes/dev/brief-buster/src/widgets/cognitivebiases.js",[],"/Volumes/dev/brief-buster/src/widgets/twitterchatter.js",[],"/Volumes/dev/brief-buster/src/widgets/searchtrends.js",[],"/Volumes/dev/brief-buster/src/widgets/innovations.js",[],"/Volumes/dev/brief-buster/src/widgets/_linkNewWindow.js",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":20,"column":14,"nodeType":"134","messageId":"135","endLine":20,"endColumn":16},{"ruleId":"132","severity":1,"message":"133","line":20,"column":40,"nodeType":"134","messageId":"135","endLine":20,"endColumn":42},{"ruleId":"132","severity":1,"message":"133","line":22,"column":22,"nodeType":"134","messageId":"135","endLine":22,"endColumn":24},{"ruleId":"132","severity":1,"message":"133","line":22,"column":37,"nodeType":"134","messageId":"135","endLine":22,"endColumn":39},{"ruleId":"136","severity":1,"message":"137","line":26,"column":53,"nodeType":"138","messageId":"139","endLine":26,"endColumn":54},{"ruleId":"132","severity":1,"message":"133","line":20,"column":21,"nodeType":"134","messageId":"135","endLine":20,"endColumn":23},{"ruleId":"132","severity":1,"message":"133","line":20,"column":45,"nodeType":"134","messageId":"135","endLine":20,"endColumn":47},{"ruleId":"132","severity":1,"message":"133","line":93,"column":23,"nodeType":"134","messageId":"135","endLine":93,"endColumn":25},{"ruleId":"140","severity":1,"message":"141","line":106,"column":5,"nodeType":"142","messageId":"143","endLine":168,"endColumn":6},{"ruleId":"144","severity":1,"message":"145","line":110,"column":9,"nodeType":"146","messageId":"147","endLine":110,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":114,"column":9,"nodeType":"146","messageId":"147","endLine":114,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":118,"column":9,"nodeType":"146","messageId":"147","endLine":118,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":122,"column":9,"nodeType":"146","messageId":"147","endLine":122,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":126,"column":9,"nodeType":"146","messageId":"147","endLine":126,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":130,"column":9,"nodeType":"146","messageId":"147","endLine":130,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":134,"column":9,"nodeType":"146","messageId":"147","endLine":134,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":138,"column":9,"nodeType":"146","messageId":"147","endLine":138,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":142,"column":9,"nodeType":"146","messageId":"147","endLine":142,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":146,"column":9,"nodeType":"146","messageId":"147","endLine":146,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":150,"column":9,"nodeType":"146","messageId":"147","endLine":150,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":154,"column":9,"nodeType":"146","messageId":"147","endLine":154,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":158,"column":9,"nodeType":"146","messageId":"147","endLine":158,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":162,"column":9,"nodeType":"146","messageId":"147","endLine":162,"endColumn":15},{"ruleId":"144","severity":1,"message":"145","line":166,"column":9,"nodeType":"146","messageId":"147","endLine":166,"endColumn":15},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","no-global-assign","no-unsafe-negation"]