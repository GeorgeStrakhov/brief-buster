{"version":3,"sources":["helpers.js","setup.js","widgets/_linkNewWindow.js","widgets/quote.js","widgets/statista.js","widgets/interview.js","widgets/callmom.js","widgets/thesaurus.js","widgets/creativecases.js","widgets/cannescases.js","widgets/futureof.js","widgets/tedideas.js","widgets/warccases.js","widgets/academicpapers.js","widgets/cognitivebiases.js","widgets/twitterchatter.js","widgets/searchtrends.js","widgets/innovations.js","suggestions.js","explode.js","nomatch.js","App.js","reportWebVitals.js","index.js"],"names":["GetBrief","urlParams","URLSearchParams","window","location","search","brief","brand","get","category","competitors","split","keywords","length","constructQueryParams","obj","v","ql","Object","keys","forEach","key","index","join","encodeURI","Setup","props","state","handleChange","bind","e","field","target","id","val","value","this","setState","formIsValid","className","to","constructExplodeLink","disabled","type","onChange","renderSubmit","React","Component","LinkNewWindow","href","encodeUrl","rel","text","Quote","term","Statista","Interview","Callmom","Thesaurus","CreativeCases","CannesCases","FutureOf","TedIdeas","WarcCases","AcademicPapers","CognitiveBiases","TwitterChatter","SearchTrends","linkHref","concat","Innovations","topic","Suggestions","suggestions","name","propKey","isMult","requiresSub","st","p","push","array","i","j","Math","floor","random","shuffleArray","sug","map","renderSug","Explode","NoMatch","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8369cc5c.chunk.js","sourcesContent":["//get the brief data from the url\nexport const GetBrief = function() {\n\n    let defaultBrief = {\n      brand: 'McDonald\\'s',\n      category: 'quick service restaurants',\n      competitors: ['Burger King', 'KFC'],\n      keywords: ['food', 'convenience', 'taste', 'value']\n    };\n\n    //get params from url query if any\n    const urlParams = new URLSearchParams(window.location.search);\n    let brief = {\n      brand : urlParams.get('brand') ? urlParams.get('brand') : '',\n      category : urlParams.get('category') ? urlParams.get('category') : '',\n      competitors : urlParams.get('competitors') ? urlParams.get('competitors').split(',') : [],\n      keywords : urlParams.get('keywords') ? urlParams.get('keywords').split(',') : []\n    }\n\n    if (brief.brand == '' && brief.category == '' && brief.competitors.length < 1 && brief.keywords.length < 1) {\n      return defaultBrief;\n    } else {\n      return  brief;\n    }\n\n}\n\n//construct QueryParams\nexport const constructQueryParams = function(obj) {\n\n  let ql = '';\n  let keys = Object.keys(obj);\n  let v;\n\n  keys.forEach((key, index) => {\n    v = obj[key];\n    if (typeof(v) == 'object') {\n      v = v.join(',');\n    }\n    if(index > 0) { ql += '&' };\n    ql += key + '=' + encodeURI(v);\n  });\n\n  return ql;\n\n}\n\n//shuffle array\nexport const shuffleArray = function (array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { GetBrief, constructQueryParams } from './helpers';\n\nclass Setup extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    this.state.brief = GetBrief();\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e) {\n    let field = e.target.id.split('-')[1]; //FIX this is a terrible hack\n    let val = e.target.value;\n    if(field == 'competitors' || field == 'keywords') {\n      val = e.target.value.split(', ');\n      if (val.length == 1 && val[0] == \"\") { //crutch to avoid empty blocks if input field is empty\n        val = [];\n      }\n    }\n    this.setState(state => (state.brief[field] = val, state))\n  }\n\n  constructExplodeLink() {\n    return 'explode?'+constructQueryParams(this.state.brief);\n  }\n\n  formIsValid() {\n    if (this.state.brief.brand && this.state.brief.category) {\n      return true;\n    }\n  }\n\n  renderSubmit() { //conditionally renders submit button as enabled or disabled depending on whether the form is valid\n    if (this.formIsValid()) {\n      return (\n        <Link className='button is-warning is-rounded is-large' to={this.constructExplodeLink()} >Let's do it</Link>\n      )\n    } else {\n      return (\n        <button className='button is-warning is-rounded is-large' disabled >Let's do it</button>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"columns is-centered\">\n          <div className=\"column is-half\">\n            <div className=\"container m-4 p-1\">\n              <p className=\"title has-text-centered mt-5\">\n                So you have a brief...\n              </p>\n              <p className=\"subtitle mt-1\">\n                This little tool can help you get started. Type in a few key things below and it will explode your brief into a long ToDo list that will help you start digging.\n              </p>\n              <hr />\n              <div className=\"inputFormContainer\">\n                <div className=\"field\">\n                  <label className=\"label\">What brand are you working on?</label>\n                  <div className=\"control\">\n                    <input className=\"input\" type=\"text\" id=\"input-brand\" onChange={this.handleChange} value={this.state.brief.brand} />\n                  </div>\n                  <p className=\"help\">Type the name of the company, brand or sub-brand that is at the center of your brief.</p>\n                </div>\n                <div className=\"field\">\n                  <label className=\"label\">What is the category?</label>\n                  <div className=\"control\">\n                    <input className=\"input\" type=\"text\" id=\"input-category\" onChange={this.handleChange} value={this.state.brief.category} />\n                  </div>\n                  <p className=\"help\">Type the name of a single category that this brand is competing in.</p>\n                </div>\n                <div className=\"field\">\n                  <label className=\"label\">Who are the biggest competitors?</label>\n                  <div className=\"control\">\n                    <input className=\"input\" type=\"text\" id=\"input-competitors\" onChange={this.handleChange} value={this.state.brief.competitors.join(', ')} />\n                  </div>\n                  <p className=\"help\">List as many competitors as you want. Use comma to separate.</p>\n                </div>\n                <div className=\"field\">\n                  <label className=\"label\">What are the most important words for this brand or category?</label>\n                  <div className=\"control\">\n                    <input className=\"input\" type=\"text\" id=\"input-keywords\" onChange={this.handleChange} value={this.state.brief.keywords.join(', ')} />\n                  </div>\n                  <p className=\"help\">List a few keywords that are relevant to the brand and/or the category. Use comma to separate.</p>\n                </div>\n              </div>\n              <hr />\n              <div className=\"buttons is-centered\">\n                {this.renderSubmit()}\n              </div>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n};\n\nexport default Setup;\n","import React from 'react';\n\nclass LinkNewWindow extends React.Component {\n\n  encodeUrl() {\n    return encodeURI(this.props.href);\n  }\n\n  render() {\n    return(\n      <a href={this.encodeUrl()} target=\"_blank\" rel=\"noreferrer\">\n      {this.props.text}\n      </a>\n    )\n  }\n\n}\n\nexport default LinkNewWindow;\n","import React from 'react';\n\nimport LinkNewWindow from './_linkNewWindow';\n\nclass Quote extends React.Component {\n\n  render() {\n    return(\n      <span> See what smart people <LinkNewWindow href={\"https://www.google.com/search?tbm=isch&q=quotes+about+\" +this.props.term} text={'have said'} /> about {this.props.term}.</span>\n    )\n  }\n\n}\n\nexport default Quote;\n","import React from 'react';\n\nimport LinkNewWindow from './_linkNewWindow';\n\nclass Statista extends React.Component {\n\n  render() {\n    return(\n      <span>Check out some <LinkNewWindow href={\"https://www.statista.com/search/?q=\" + this.props.term + \"&qKat=search\"} text={'business stats'} /> about {this.props.term} (like market share, sales etc.)</span>\n    )\n  }\n\n}\n\nexport default Statista;\n","import React from 'react';\n\nimport LinkNewWindow from './_linkNewWindow';\n\nclass Interview extends React.Component {\n\n  render() {\n    return(\n      <span>\n        Reach out to <LinkNewWindow href={\"https://www.linkedin.com/search/results/people/?keywords=\" + this.props.brand + \"&qKat=search\"} text={this.props.brand + \" employees or alumni\"} /> and ask them for a quick interview to get an insider's perspective.\n      </span>\n    )\n  }\n\n}\n\nexport default Interview;\n","import React from 'react';\n\nclass Callmom extends React.Component {\n\n  render() {\n    return(\n      <span>Call your mom (partner / friend / kid... ) and ask her if she ever heard of {this.props.term} and if yes what she thinks about it. Listen carefully to not just the words, but also the emotions behind.</span>\n    )\n  }\n\n}\n\nexport default Callmom;\n","import React from 'react';\n\nimport LinkNewWindow from './_linkNewWindow';\n\nclass Thesaurus extends React.Component {\n\n  render() {\n    return(\n      <span> See the definition of <LinkNewWindow href={'https://www.google.com/search?q=' +this.props.term + '+definition'} text={this.props.term} /> from the Oxford dictionary. Check out synonyms, antonyms and word origin.</span>\n    )\n  }\n\n}\n\nexport default Thesaurus;\n","import React from 'react';\n\nimport LinkNewWindow from './_linkNewWindow';\n\nclass CreativeCases extends React.Component {\n\n  render() {\n    return(\n      <span>Check out some recent <LinkNewWindow href={'https://www.contagious.com/io/search?query=' + this.props.brand} text={'fame-building creative ideas'} /> from {this.props.brand}.</span>\n    )\n  }\n\n}\n\nexport default CreativeCases;\n","import React from 'react';\n\nimport LinkNewWindow from './_linkNewWindow';\n\nclass CannesCases extends React.Component {\n\n  render() {\n    return(\n      <span>Check out if {this.props.brand} has any interesting <LinkNewWindow href={'https://www.youtube.com/results?search_query=' + this.props.brand + '+cannes+lions'} text={'Cannes Lions cases'} />.</span>\n    )\n  }\n\n}\n\nexport default CannesCases;\n","import React from 'react';\n\nimport LinkNewWindow from './_linkNewWindow';\n\nclass FutureOf extends React.Component {\n\n  render() {\n    return(\n      <span>Find out what people have to say about  <LinkNewWindow href={'https://www.youtube.com/results?search_query=the+future+of+' + this.props.term} text={'the future of '+this.props.term} />.</span>\n    )\n  }\n\n}\n\nexport default FutureOf;\n","import React from 'react';\n\nimport LinkNewWindow from './_linkNewWindow';\n\nclass TedIdeas extends React.Component {\n\n  render() {\n    return(\n      <span>Go watch some <LinkNewWindow href={'https://www.ted.com/search?cat=videos&q=' + this.props.term} text={'TED talks'} /> about {this.props.term}.</span>\n    )\n  }\n\n}\n\nexport default TedIdeas;\n","import React from 'react';\n\nimport LinkNewWindow from './_linkNewWindow';\n\nclass WarcCases extends React.Component {\n\n  render() {\n    return(\n      <span>Check out if there are any interesting <LinkNewWindow href={'https://www.warc.com/search?q=' + this.props.category} text={'Effectiveness Cases on WARC'} /> about the {this.props.category} category.</span>\n    )\n  }\n\n}\n\nexport default WarcCases;\n","import React from 'react';\n\nimport LinkNewWindow from './_linkNewWindow';\n\nclass AcademicPapers extends React.Component {\n\n  render() {\n    return(\n      <span>Check out if any <LinkNewWindow href={'https://www.jstor.org/action/doBasicSearch?Query=' + this.props.term} text={'Academic Papers about '+this.props.term} /> could give some insights.</span>\n    )\n  }\n\n}\n\nexport default AcademicPapers;\n","import React from 'react';\n\nclass CognitiveBiases extends React.Component {\n\n  render() {\n    return(\n      <span>Look through the <a href=\"https://en.wikipedia.org/wiki/List_of_cognitive_biases#Belief,_decision-making_and_behavioral\" target=\"_blank\" rel=\"noreferrer\">list of human cognitive biases</a> and see if there is anything relevant for the {this.props.category} category</span>\n    )\n  }\n\n}\n\nexport default CognitiveBiases;\n","import React from 'react';\n\nimport LinkNewWindow from './_linkNewWindow';\n\nclass TwitterChatter extends React.Component {\n\n  render() {\n    return(\n      <span>See how people are <LinkNewWindow href={'https://twitter.com/search?lang=en-GB&q=' + this.props.brand} text={'talking about '+this.props.brand} /> on Twitter.</span>\n    )\n  }\n\n}\n\nexport default TwitterChatter;\n","import React from 'react';\n\nimport LinkNewWindow from './_linkNewWindow';\n\nclass SearchTrends extends React.Component {\n\n  render() {\n    const competitors = this.props.brief.competitors.concat([this.props.brief.brand]); //add the brand to competitors\n    const linkHref = 'https://trends.google.com/trends/explore?date=all&q='+competitors.join(',');\n    return(\n      <span>Compare <LinkNewWindow href={linkHref} text='long-term Share of Search trends' /> for {this.props.brief.brand} and its competitors.</span>\n    )\n  }\n\n}\n\nexport default SearchTrends;\n","import React from 'react';\n\nimport LinkNewWindow from './_linkNewWindow';\n\nclass Innovations extends React.Component {\n\n  render() {\n    return(\n      <span>Check out the latest <LinkNewWindow href={'https://www.springwise.com/search?q=' + this.props.topic} text={'innovations in '+this.props.topic} />.</span>\n    )\n  }\n\n}\n\nexport default Innovations;\n","/*\n * this component receives brief object as a prop and generates a number of suggestions in random order. it renders a <ol> element with all of them\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { shuffleArray, constructQueryParams } from './helpers';\n\n// import all the widgets\nimport Quote from './widgets/quote'; //quotes (google image search) about a $term\nimport Statista from './widgets/statista'; //statista info for a $brand or a $category\nimport Interview from './widgets/interview'; //reach out to $brand company's people on linkedin\nimport Callmom from './widgets/callmom'; // call your mom and ask her what she thinks about a $term\nimport Thesaurus from './widgets/thesaurus'; //check out dictionary definition for a $term, word origin and synonims\nimport CreativeCases from './widgets/creativecases'; // best creative cases for $brand from contagious\nimport CannesCases from './widgets/cannescases'; //cannes lions cases for $brand that are available on youtube\nimport FutureOf from './widgets/futureof'; //youtube search for \"the future of $term\"\nimport TedIdeas from './widgets/tedideas'; //TED search for $term\nimport WarcCases from './widgets/warccases'; //WARC search for $category\nimport AcademicPapers from './widgets/academicpapers'; //JSTOR search for a $keyword\nimport CognitiveBiases from './widgets/cognitivebiases'; //look at the list of cognitive biases from wikipedia\nimport TwitterChatter from './widgets/twitterchatter'; //see what people are saying on twitter about the $brand\nimport SearchTrends from './widgets/searchtrends'; //see how competitors are doing on search trends\nimport Innovations from './widgets/innovations'; //search SpringWise for innovations on the $topic\n\n//n-gram?\n// spotify or youtube playlist?\n// wikipedia history of terms & competitors\n// symbols and icons: thenounproject\n// check out official social channels (FB, twitter)\n// no-link tasks (e.g. think write down associations for 5 minutes)\n\nclass Suggestions extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    // create an array with all suggestionTypes for each specifying how it works\n    const suggestionTypes = [\n\n      { name: 'Quote', propKey: 'keywords', isMult: true }, //propKey - which key needs to be passed, isMult means that for each of the competitors (or keywords) a new suggestino needs to be generated\n\n      { name: 'Statista', propKey: 'competitors', isMult: true },\n\n      { name: 'Statista', propKey: 'category', isMult: false }, // this is for a separate call on category, not just competitors\n\n      { name: 'Callmom', propKey: 'brand', isMult: false },\n\n      { name: 'Thesaurus', propKey: 'keywords', isMult: true },\n\n      { name: 'CreativeCases', propKey: 'competitors', isMult: true, requiresSub: true },\n\n      { name: 'CannesCases', propKey: 'competitors', isMult: true },\n\n      { name: 'FutureOf', propKey: 'category', isMult: false },\n\n      { name: 'TedIdeas', propKey: 'keywords', isMult: true },\n\n      { name: 'AcademicPapers', propKey: 'keywords', isMult: true },\n\n      { name: 'WarcCases', propKey: 'category', isMult: false },\n\n      { name: 'CognitiveBiases', propKey: 'category', isMult: false },\n\n      { name: 'TwitterChatter', propKey: 'competitors', isMult: true },\n\n      { name: 'SearchTrends', propKey: 'competitors', isMult: false },\n\n      { name: 'Innovations', propKey: 'keywords', isMult: true },\n\n      { name: 'Interview', propKey: 'brand', isMult: false }\n\n    ];\n\n    let suggestions = [];\n\n\n    //this bit of code figures out how many actual suggestions we need, because some suggestion Types need to be done for all competitors or all keywords\n\n    suggestionTypes.forEach((st) => {\n\n      if (!st.isMult) {\n        if(this.props.brief[st.propKey]) { //check that the property exists (otherwise empty category can be passed on)\n          suggestions.push({name: st.name, propKey: st.propKey, val: this.props.brief[st.propKey]});\n        }\n      } else {\n        this.props.brief[st.propKey].forEach((p) => {\n          suggestions.push({name: st.name, propKey: st.propKey, val: p, requiresSub: st.requiresSub});\n        });\n        //special case if mult and competitors => additionally one for the brand as well\n        if(st.propKey == 'competitors') {\n          suggestions.push({name: st.name, propKey: st.propKey, val: this.props.brief.brand});\n        }\n      }\n\n    });\n\n\n    this.state.suggestions = shuffleArray(suggestions);\n\n  }\n\n  renderSug(sug) { //renders the component whose name is passed as sug\n    switch(sug.name) {\n\n      case 'Quote':\n        return (<Quote term={sug.val} />)\n        break;\n\n      case 'Statista':\n        return (<Statista term={sug.val} />)\n        break;\n\n      case 'Interview':\n        return (<Interview brand={sug.val} />)\n        break;\n\n      case 'Callmom':\n        return (<Callmom term={sug.val} />)\n        break;\n\n      case 'Thesaurus':\n        return (<Thesaurus term={sug.val} />)\n        break;\n\n      case 'CreativeCases':\n        return (<CreativeCases brand={sug.val} />)\n        break;\n\n      case 'CannesCases':\n        return (<CannesCases brand={sug.val} />)\n        break;\n\n      case 'FutureOf':\n        return (<FutureOf term={sug.val} />)\n        break;\n\n      case 'TedIdeas':\n        return (<TedIdeas term={sug.val} />)\n        break;\n\n      case 'WarcCases':\n        return (<WarcCases category={sug.val} />)\n        break;\n\n      case 'AcademicPapers':\n        return (<AcademicPapers term={sug.val} />)\n        break;\n\n      case 'CognitiveBiases':\n        return (<CognitiveBiases category={sug.val}/>)\n        break;\n\n      case 'TwitterChatter':\n        return (<TwitterChatter brand={sug.val}/>)\n        break;\n\n      case 'SearchTrends':\n        return (<SearchTrends brief={this.props.brief}/>) //we are passing the full brief here as this widget needs to be a bit smarter than the rest\n        break;\n\n      case 'Innovations':\n        return (<Innovations topic={sug.val}/>)\n        break;\n\n    }\n  }\n\n  render() {\n    return(\n      <div>\n        <p className=\"subtitle has-text-centered mt-1\">\n          Here are {this.state.suggestions.length} suggestions to get you started on your <Link to={'/?'+constructQueryParams(this.props.brief)}>{this.props.brief.brand} brief</Link>:\n        </p>\n        <hr />\n        <ol>\n          {this.state.suggestions.map(sug => (\n            <li className={'suggestion '+(sug.requiresSub ? 'sug-paywalled' : 'sug-free')} key={'key-'+Math.random()}>{this.renderSug(sug)}</li>\n          ))}\n        </ol>\n        <hr />\n        <p className=\"has-text-centered\">This is it for now. Hope it was helpful in some way. Don't see your favorite tool here? Feel free to <a href=\"mailto:george.strahov@gmail.com?subject=Add%20a%20tool%20to%20Brief%20Exploder\">send me a letter</a>. Best, +G</p>\n      </div>\n    );\n  }\n\n}\n\nexport default Suggestions;\n","import React from 'react';\n\nimport { GetBrief } from './helpers';\n\nimport Suggestions from './suggestions';\n\nclass Explode extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.state.brief = GetBrief();\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"columns is-centered\">\n          <div className=\"column is-half\">\n            <div className=\"container m-4 p-1\">\n              <p className=\"title has-text-centered mt-5\">\n                Strategy Explosion ToDo List\n              </p>\n              <div className=\"widgetContainer content\">\n                <Suggestions brief={this.state.brief} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default Explode;\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nclass NoMatch extends React.Component {\n\n  render() {\n    return (\n      <div className=\"m-6\">\n        <div className=\"columns is-centered\">\n          <div className=\"column is-half\">\n            <p className=\"title has-text-centered\">404</p>\n            <p className=\"subtitle has-text-centered mt-5\">Uh-oh, looks like the link is no good...</p>\n            <div className=\"buttons is-centered m-6\">\n              <Link to=\"/\" className=\"button is-warning is-rounded is-large\">Back to the start</Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default NoMatch;\n","import React from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport Setup from './setup';\nimport Explode from './explode';\nimport NoMatch from './nomatch';\n\nclass App extends React.Component {\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path=\"/explode\">\n            <Explode />\n          </Route>\n          <Route exact path=\"/\">\n            <Setup />\n          </Route>\n          <Route path=\"*\">\n            <NoMatch />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}